[{"name":"AC","equals":false,"desc":"Unbounded Fanin Polylogarithmic-Depth Circuits. The class of decision problems solvable by a nonuniform family of Boolean circuits, with polynomial size, depth O(log^k(n)), and unbounded fanin, for some k. The gates allowed are AND, OR, and NOT. For a given k, we get AC^k, such as AC^1. The class AC^0 is when k=0 i.e. constant depth. Equal to NC and TC.","children":[]},{"name":"AC^0","equals":[],"desc":"Unbounded Fanin Constant-Depth Circuits. An especially important subclass of AC, corresponding to constant-depth, unbounded-fanin, polynomial-size circuits with AND, OR, and NOT gates.","children":["ACC^0"]},{"name":"AC^1","equals":[],"desc":"Unboudned Fanin Log-depth Circuits.","children":["TC^1"]},{"name":"ACC^0","equals":[],"desc":"AC0 With Arbitrary MOD Gates.","children":["TC^0"]},{"name":"ACKERMANN","equals":[],"desc":"Ackermann function time. Problems solvable by a Turing machine in time A(O(n),O(n)), where A is the Ackermann function. Reachability in vector addition systems is complete for this class, placing it strictly above PR.","children":["R"]},{"name":"ALL","equals":[],"desc":"All languages. Everything is contained in this class. Not considered feasible.","children":[]},{"name":"AM","equals":[],"desc":"Arthur-Merlin games","children":["Π2"]},{"name":"AP","equals":false,"desc":"Alternating polynomial time. Polynomial time with unlimited switches between an \"NP\"-like \"OR\" mode, and a coNP \"AND\" mode.","children":[]},{"name":"BPP","equals":[],"desc":"Bounded error Probabilistic Polynomial time. Problems with a probabilistic polynomial-time Turing machine with at least a 2/3 chance of a correct answer.","children":["Π2","NISQ","Σ2"]},{"name":"BQP","equals":[],"desc":"TODO","children":["QCMA","DQP"]},{"name":"CFL","equals":[],"desc":"Context-Free languages","children":["NP"]},{"name":"CH","equals":[],"desc":"Counting Hierarchy. Union of PP, PP^PP, PP^(PP^PP), and so on. With the counting operator C[M] = PP^M, we can say that CH = C^O(1)[P], analogous to how PH = Σ^O(1)[P] = Π^O(1)[P]","children":["PSPACE"]},{"name":"coAM","equals":[],"desc":"Complement of Arthur-Merlin games","children":["Σ2"]},{"name":"coNL","equals":false,"desc":"Complement of Nondeterministic Logarithmic space. Problems decided in logarithmic space by a deterministic Turing machine.","children":[]},{"name":"coMA","equals":[],"desc":"Complement of Merlin-Arthur games","children":["coAM"]},{"name":"coNP","equals":[],"desc":"Complement of Nondeterministic Polynomial time. Problems whose complement decided in polynomial time by a nondeterministic Turing machine.","children":["coMA","Δ2"]},{"name":"coRE","equals":[],"desc":"Complement of Recursively enumerable languages. Languages whose rejection can be recognized by a Turing machine.","children":["ALL"]},{"name":"coRP","equals":[],"desc":"Complement of Randomized Polynomial time. Problems with a probabilistic polynomial-time Turing machine with zero error on YES instances","children":["BPP","coNP"]},{"name":"DET","equals":[],"desc":"Problems L-reducible to computing the determinant of an n-by-n matrix of n-bit integers. ComplexityZoo says the corresponding function class is GapL (TODO ref).","children":["NC^2"]},{"name":"DQC1","equals":[],"desc":"Deterministic Quantum Computing with 1 Clean Bit. The class of problems solvable by a BQP machine in which a single qubit is initialized to the '0' state, and the remaining qubits are initialized to the maximally mixed state. Defined in {ref:KL98}. This has been called BQ1P, sometimes, to distinguish it from the _sampling_ problem of DQC1 circuits. Since \"DQC1\" seems to have stuck, we call the sampling problem DQC1S.","children":["BQP"]},{"name":"DQP","equals":[],"desc":"Dynamical Quantum Polynomial-Time.The class of decision problems solvable by a BQP machine with oracle access to a dynamical simulator. When given a polynomial-size quantum circuit, the simulator returns a sample from the distribution over \"classical histories\" induced by the circuit. The simulator can adversarially choose any history distribution that satisfies the axioms of \"symmetry\" and \"locality\" -- so that the DQP algorithm has to work for any distribution satisfying these axioms. Defined in {ref:Aar05}.","children":["EXP"]},{"name":"E","equals":[],"desc":"(Linear) Exponential time. Problems decided in exponential time with linear exponent, by a deterministic Turing machine.","children":["EXP"]},{"name":"ELEMENTARY","equals":[],"desc":"Elementary languages. The union of EXP, EEXP, EEXP, etc.: solvable by a Turing machine with runtime 2^n, 2^(2^n), 2^(2^(2^n)) for some height. Equivalently, DTIME(^{O(1)}n), where ^{a}b indicates the tetration of b to the height a.","children":["TOWER"]},{"name":"EQP","equals":[],"desc":"TODO","children":["BQP"]},{"name":"EXP","equals":[],"desc":"Exponential time. Problems decided in singly exponential time by a deterministic Turing machine.","children":["ELEMENTARY"]},{"name":"GA","equals":[],"desc":"Graph Automorphism. Languages that can be polynomial-time Turing reduced to Graph Automorphism. Compare with GI for isomorphism, and GAK for Karp reductions.","children":["GI"]},{"name":"GAK","equals":[],"desc":"Graph Automorphism with Karp reductions. Languages that can be polynomial-time Karp reduced to Graph Automorphism.","children":["GA"]},{"name":"GI","equals":[],"desc":"Graph Isomorphism. Languages that can be polynomial-time Turing reduced to Graph Isomorphism. This is, in some sense, a powerful reduction; compare with GIK for Karp reductions. Compare with GA which only allows automorphism checking.","children":["Δ2"]},{"name":"GIK","equals":[],"desc":"Graph Isomorphism with Karp reductions. Languages that can be polynomial-time Karp reduced to Graph Automorphism.","children":["SZK","GI","NP"]},{"name":"L","equals":[],"desc":"Logarithmic space. Problems decided in logarithmic space by a deterministic Turing machine.","children":["DQC1","RL"]},{"name":"MA","equals":[],"desc":"Merlin-Arthur games","children":["AM","QCMA"]},{"name":"NC","equals":["TC","AC"],"desc":"Nick's Class","children":["P","RNC"]},{"name":"NC^0","equals":["RNC^0"],"desc":"Constant-Depth Nick's Class: uniform constant depth circuits with bounded-fanin gates. By definition, a decision problem in NC0 can depend on only a constant number of bits of the input. Thus, NC^0 often refers to functions computable by constant-depth, bounded-fanin circuits, as it crops up in NC^0 reduction. Here we call that class of functions FNC^0 instead.","children":["AC^0","QNC^0"]},{"name":"NC^1","equals":[],"desc":"Log-Depth Nick's Class","children":["L","RNC^1"]},{"name":"NC^2","equals":[],"desc":"Log^2-Depth Nick's Class","children":["NC"]},{"name":"NISQ","equals":[],"desc":"Problems solvable by a classical computer in poly(n) time with poly(n) queries to an λ-NQC oracle, which outputs samples from a λ-noisy quantum circuit: after each gate single gate, a λ-noise depolarizing channel is applied simultaneously to every qubit.","children":["BQP"]},{"name":"NL","equals":["coNL"],"desc":"Nondeterministic Logarithmic space. Problems decided in logarithmic space by a deterministic Turing machine.","children":["DET","AC^1"]},{"name":"NP","equals":[],"desc":"Nondeterministic Polynomial time. Problems decided in polynomial time by a nondeterministic Turing machine.","children":["Δ2","MA"]},{"name":"P","equals":[],"desc":"Polynomial time. Problems decided in polynomial time by a deterministic Turing machine.","children":["EQP","GAK","ZPP","GIK","E"]},{"name":"PARITY","equals":[],"desc":"The single language asking, 'Is the number of 1s in the input an even number'?","children":["REG","ACC^0"]},{"name":"PH","equals":[],"desc":"Polynomial hierarchy","children":["PSPACE"]},{"name":"PP","equals":[],"desc":"Probabilistic Polynomial time.","children":["CH"]},{"name":"PR","equals":[],"desc":"Primitive Recursive. Languages decidable in time bounded by a primitive recursive function of natural numbers.","children":["ACKERMANN"]},{"name":"PSPACE","equals":["AP"],"desc":"Polynomial space. Problems decided in polynomial space by a deterministic Turing machine.","children":["EXP"]},{"name":"QCMA","equals":[],"desc":"Quantum-Classical Merlin-Arthur. Like QMA, but Merlin's proof is a classical string; like NP, but the verifier has a quantum computer (BQP machine).","children":["QMA"]},{"name":"QMA","equals":[],"desc":"Quantum Merlin-Arthur. Problems for which an omniscient 'Merlin' can submit a proof to 'Arthur' that a statement is true, and Arthur believes it with high probability (<1/3 chance of failing) -- but this proof can be a quantum state, and Arthur has a quantum computer.","children":["PP"]},{"name":"QNC","equals":[],"desc":"The class of decision problems solvable by polylogarithmic-depth quantum circuits with bounded probability of error. The zoo says, \"A uniformity condition may also be imposed.\"; for the purpose of this site we _do_ impose that condition. Some sources like https://dl.acm.org/doi/10.1145/3570637 refer to this as BQNC.","children":["BQP"]},{"name":"QNC^0","equals":[],"desc":"Constant-depth quantum circuits","children":["QNC^1"]},{"name":"QNC^1","equals":[],"desc":"Log-depth quantum circuits","children":["QNC"]},{"name":"R","equals":[],"desc":"Recursive languages. RE∩coRE. Languages solvable by a Turing machine.","children":["RE","coRE"]},{"name":"RE","equals":[],"desc":"Recursively enumerable languages. Languages whose acceptance can be recognized by a Turing machine.","children":["ALL"]},{"name":"REG","equals":[],"desc":"Regular languages","children":["CFL","NC^1"]},{"name":"RL","equals":[],"desc":"Randomized Logspace. Problems with a probabilistic logarithmic-space Turing machine with zero error on NO instances (and, technically, a termination probability of 1 on all inputs).","children":["NL"]},{"name":"RP","equals":[],"desc":"Randomized Polynomial time. Problems with a probabilistic polynomial-time Turing machine with zero error on NO instances","children":["BPP","NP"]},{"name":"RNC","equals":[],"desc":"Randomized Nick's Class. The class of decision problems solvable by polylogarithmic-depth random circuits with bounded one-sided probability of error: it must never incorrectly accept, and it must correctly reject at least 1/2 of the time.","children":["RP","QNC"]},{"name":"RNC^0","equals":false,"desc":"Randomized constant-depth circuits of bounded-fanin. Not very interesting because the randomness cannot be useful, so this is equal to NC^0. But the functional version FRNC^0 is slightly more interesting (in the same way that FNC^0 is more interesting than NC^0) and has been used in reductions, e.g. https://drops.dagstuhl.de/opus/volltexte/2023/17506/pdf/LIPIcs-ITCS-2023-3.pdf","children":[]},{"name":"RNC^1","equals":[],"desc":"Randomized log-depth circuits of bounded-fanin.","children":["RNC","QNC^1"]},{"name":"Starfree","equals":[],"desc":"Star-free languages, see https://en.wikipedia.org/wiki/Star-free_language. A subset of regular languages, where constant terms are allowed, and then we take the closure under complementation, union, and concatenation. Intersection comes for free. The regex (ab)^* is not in this class.","children":["REG","AC^0"]},{"name":"SZK","equals":[],"desc":"Statistical Zero Knowledge.","children":["AM","coAM","DQP"]},{"name":"TC","equals":false,"desc":"Threshold Circuits","children":[]},{"name":"TC^0","equals":[],"desc":"Constant-Depth Threshold Circuits","children":["NC^1"]},{"name":"TC^1","equals":[],"desc":"Log-Depth Threshold Circuits","children":["NC^2"]},{"name":"TOWER","equals":[],"desc":"Power-tower time. Solvable in time f(x), where f can be expressed using tetration (and +, *, ^, 0, 1).","children":["PR"]},{"name":"ZPP","equals":[],"desc":"Zero error Probabilistic Polynomial time. Problems with a probabilistic Turing machine with zero error and polynomial expected running time","children":["RP","coRP"]},{"name":"Δ2","equals":[],"desc":"P^NP. The weakest class at the second level in the polynomial hierarchy.","children":["Π2","Σ2"]},{"name":"Π2","equals":[],"desc":"Universal polynomial time, 2 alternations. coNP^NP, at the second level in the polynomial hierarchy.","children":["PH"]},{"name":"Σ2","equals":[],"desc":"Existential polynomial time, 2 alternations. NP^coNP, at the second level in the polynomial hierarchy.","children":["PH"]}]